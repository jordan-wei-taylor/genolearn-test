"""
train doc
"""

from   genolearn.logger import print_dict
from   genolearn import  wd
from   genolearn.utils       import append
import click
import os

@click.command()
@click.option('--overwrite', default = False, is_flag = True, show_default = True)
def train(overwrite):
    """
    trains machine learning models using a grid search for hyperparameter tuning.

    \b
    prompted information
        output directory      : output directory
        meta                  : metadata filename to use
        model config          : path to model configuration file generated by genolean config model
        feature selection     : feature selection file to use within <working-dir>/feature-selection
        num features          : comma seperated integers for varying number of features to consider
        min count             : min count of training class observations to be considered
        target subset         : subset of target values to train on if provided
        metric                : statistical metric to measure goodness of fit
        aggregation function  : aggregation function to compute overall goodness of fit
    """
    from genolearn.utils import prompt
    
    if 'model' not in os.listdir(wd):
        return print('execute "genolearn config model" first')
    
    if 'feature-selection' not in os.listdir(wd):
        return print('execute "genolearn feature-selection" first')
        
    meta  = os.listdir(os.path.join(wd, 'meta'))
    model = os.listdir(os.path.join(wd, 'model'))
    fs    = [file for file in os.listdir(os.path.join(wd, 'feature-selection')) if not file.endswith('.log')]
    info  = dict(output_dir = dict(type = click.Path()),
                 meta = dict(type = click.Choice(meta)),
                 model_config = dict(type = click.Choice(model)),
                 feature_selection = dict(type = click.Choice(fs)),
                 num_features = dict(default = 1000, type = click.IntRange(1)),
                 min_count = dict(default = 0, type = click.IntRange(0)),
                 target_subset = dict(default = 'None', type = click.STRING),
                 metric = dict(default = 'f1_score', type = click.STRING),
                 aggregate_func = dict(default = 'weighted_mean', type = click.Choice(['mean', 'weighted_mean'])))

    params = prompt(info)

    os.makedirs(os.path.join(wd, 'train'), exist_ok = True)
    
    output_dir = os.path.join(wd, 'train', params['output_dir'])
    
    if os.path.exists(output_dir):
        if overwrite:
            import shutil
            shutil.rmtree(output_dir)
        else:
            return print(f"\"{params['output_dir']}\" exists! Append --overwrite to continue")

    params['output_dir'] = output_dir

    if isinstance(params['num_features'], int):
        params['num_features'] = [params['num_features']]

    print_dict('executing "genolearn train" with parameters:', params)

    from genolearn.core.train import train
    train(**params)
    append(f'train ({output_dir})')